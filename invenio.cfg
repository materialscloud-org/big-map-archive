from datetime import datetime
import os
from dotenv import load_dotenv

def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Create environment variables from invenio.env
# Make sure that invenio.env appears in the virtual environment, in the same directory as invenio.cfg
basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, 'invenio.env'))


# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = []


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = 'Welcome to BIG-MAP Archive'

# Header logos
THEME_LOGO_LEFT = 'images/battery2030.png'
THEME_LOGO_RIGHT = 'images/big-map.png'
THEME_LOGO = 'images/battery2030.png'

# Site name
THEME_SITENAME = 'BIG-MAP Archive'


# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY='invenio_s3.s3fs_storage_factory'

FILES_REST_DEFAULT_QUOTA_SIZE = 1.00001 * 10**11 # ~100 GB
FILES_REST_DEFAULT_MAX_FILE_SIZE = FILES_REST_DEFAULT_QUOTA_SIZE

# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html
APP_RDM_ADMIN_EMAIL_RECIPIENT = os.getenv('INVENIO_APP_RDM_ADMIN_EMAIL_RECIPIENT')

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'

APP_RDM_DEPOSIT_FORM_QUOTA = {
    "maxFiles": 100,
    "maxStorage": FILES_REST_DEFAULT_QUOTA_SIZE,
}

# Set access of new records to restricted
from invenio_app_rdm.records_ui.views import deposits
from invenio_rdm_records.services.schemas import RDMRecordSchema
from invenio_rdm_records.services.schemas.utils import dump_empty
from flask import current_app
from invenio_rdm_records.proxies import current_rdm_records
from invenio_app_rdm.records_ui.utils import set_default_value

def new_record():
    """Create an empty record with default values."""
    record = dump_empty(RDMRecordSchema)
    record['access']['record'] = 'restricted'
    record['access']['files'] = 'restricted'
    record['access']['status'] = 'restricted'
    record["files"] = {"enabled": current_app.config.get("RDM_DEFAULT_FILES_ENABLED")}
    if "doi" in current_rdm_records.records_service.config.pids_providers:
        record["pids"] = {"doi": {"provider": "external", "identifier": ""}}
    else:
        record["pids"] = {}
    record["status"] = "draft"
    defaults = current_app.config.get("APP_RDM_DEPOSIT_FORM_DEFAULTS") or {}
    for key, value in defaults.items():
        set_default_value(record, value, key)
    return record

deposits.new_record = new_record

# Customize shared record page
APP_RDM_DETAIL_SIDE_BAR_TEMPLATES = [
    "invenio_app_rdm/records/details/side_bar/manage_menu.html",
    "invenio_app_rdm/records/details/side_bar/versions.html",
    "invenio_app_rdm/records/details/side_bar/export.html",
]

# Community permissions
from invenio_app_rdm.communities_ui import views
from invenio_app_rdm.communities_ui.views.ui import record_permission_denied_error

from flask import Blueprint
from invenio_records_resources.services.errors import PermissionDeniedError
from invenio_communities.views.decorators import pass_community

@pass_community(serialize=True)
def deny_access_for_community(pid_value, community, community_ui):
    raise PermissionDeniedError()

def create_ui_blueprint(app):
    """Register blueprint routes on app."""
    routes = app.config["RDM_COMMUNITIES_ROUTES"]

    blueprint = Blueprint(
        "invenio_app_rdm_communities",
        __name__,
        template_folder="../templates",
        static_folder="../static",
    )

    blueprint.add_url_rule(
        routes["community-detail"],
        view_func=deny_access_for_community,
    )

    # Register error handlers
    blueprint.register_error_handler(
        PermissionDeniedError, record_permission_denied_error
    )

    return blueprint

views.create_ui_blueprint = create_ui_blueprint


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

SITE_UI_URL = "https://127.0.0.1:5000"
SITE_API_URL = "https://127.0.0.1:5000/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "bm-1.0",
            "title": "BIG-MAP Archive License",
            "description": ("The BIG-MAP Archive License allows "
                            "re-distribution and re-use of work "
                            "within the BIG-MAP community."),
            "link": "https://www.big-map.eu/",
        }
    ],
    "publisher": "BIG-MAP Archive"
}


# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Allow readers to publish without review
from invenio_rdm_records.requests.community_submission import CommunitySubmission

CommunitySubmission.needs_context = {
        "community_roles": ["owner", "manager", "curator", "reader"],
}

# Disable metadata-only records
RDM_ALLOW_METADATA_ONLY_RECORDS = False

# Options for reference schemes in the upload form
import idutils

RDM_RECORDS_IDENTIFIERS_SCHEMES = {
    "arxiv": {"label": _("arXiv"), "validator": idutils.is_arxiv, "datacite": "arXiv"},
    "doi": {"label": _("DOI"), "validator": idutils.is_doi, "datacite": "DOI"},
    "isbn": {"label": _("ISBN"), "validator": idutils.is_isbn, "datacite": "ISBN"},
    "url": {"label": _("URL"), "validator": idutils.is_url, "datacite": "URL"},
}

# Do not send an email to the community owner(s) when a record is directly published to that community
from invenio_drafts_resources.services.records.uow import ParentRecordCommitOp
from invenio_notifications.services.uow import NotificationOp
from invenio_records_resources.services.uow import RecordIndexOp, unit_of_work
from marshmallow import ValidationError

from invenio_rdm_records.notifications.builders import CommunityInclusionSubmittedNotificationBuilder
from invenio_rdm_records.requests.decorators import request_next_link
from invenio_rdm_records.services.errors import ReviewNotFoundError

@request_next_link()
@unit_of_work()
def submit(self, identity, id_, data=None, require_review=False, uow=None):
    """Submit record for review or direct publish to the community."""
    if not isinstance(require_review, bool):
        raise ValidationError(
            _("Must be a boolean, true or false"),
            field_name="require_review",
        )

    draft = self.draft_cls.pid.resolve(id_, registered_only=False)
    # Preconditions
    if draft.parent.review is None:
        raise ReviewNotFoundError()

    request_type = draft.parent.review.get_object()["type"]
    self._validate_request_type(request_type)

    # since it is submit review action, assume the receiver is community
    community = draft.parent.review.receiver.resolve()

    # Check permission
    self.require_permission(identity, "update_draft", record=draft)

    # create review request
    request_item = current_rdm_records.community_inclusion_service.submit(
        identity, draft, community, draft.parent.review, data, uow
    )
    request = request_item._request

    # This shouldn't be required BUT because of the caching mechanism
    # in the review systemfield, the review should be set with the updated
    # request object
    draft.parent.review = request
    uow.register(ParentRecordCommitOp(draft.parent))

    if not require_review:
        request_item = current_rdm_records.community_inclusion_service.include(
            identity, community, request, uow
        )

    uow.register(RecordIndexOp(draft, indexer=self.indexer))
    return request_item

from invenio_rdm_records.services.review.service import ReviewService

ReviewService.submit = submit

RDM_SEARCH_DRAFTS = {
    'facets': [],
    'sort': ['bestmatch', 'updated-desc', 'updated-asc', 'newest', 'oldest',
             'version'],
}

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ================
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# ===================
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# ====================
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "big-map-archive.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# ==============

SEARCH_INDEX_PREFIX = "big-map-archive-"


# Flask-Mail
# ==========

NOREPLY_EMAIL = "noreply@materialscloud.org" # this is not working

MAIL_MAX_EMAILS = None
MAIL_ASCII_ATTACHMENTS = False

# Disable email sending by default.
# if set False will send email
# if set True will NOT send email
MAIL_SUPPRESS_SEND = False

# Email subject for account registration emails.
SECURITY_EMAIL_SUBJECT_REGISTER = "Welcome to the BIG MAP Archive"

# Invenio-S3
# ==========
S3_ENDPOINT_URL = os.getenv('INVENIO_S3_ENDPOINT_URL')

# Allow S3 endpoint in the CSP rules
APP_DEFAULT_SECURE_HEADERS['content_security_policy']['default-src'].append(S3_ENDPOINT_URL)

# Allow multipart file upload
from invenio_s3.ext import InvenioS3
from werkzeug.utils import cached_property
from flask import current_app

@cached_property
def init_s3fs_info(self):
    """Gather all the information needed to start the S3FSFileSystem."""
    if 'S3_ACCCESS_KEY_ID' in current_app.config:
        current_app.config['S3_ACCESS_KEY_ID'] = current_app.config[
            'S3_ACCCESS_KEY_ID']
        warnings.warn(
            'Key S3_ACCCESS_KEY_ID contained a typo and has been '
            'corrected to S3_ACCESS_KEY_ID, support for the '
            'flawed version will be removed.',
            DeprecationWarning
        )

    if 'S3_SECRECT_ACCESS_KEY' in current_app.config:
        current_app.config['S3_SECRET_ACCESS_KEY'] = current_app.config[
            'S3_SECRECT_ACCESS_KEY']
        warnings.warn(
            'Key S3_SECRECT_ACCESS_KEY contained a typo and has been '
            'corrected to S3_SECRET_ACCESS_KEY, support for the '
            'flawed version will be removed.',
            DeprecationWarning
        )

    info = dict(
        key=current_app.config.get('S3_ACCESS_KEY_ID', ''),
        secret=current_app.config.get('S3_SECRET_ACCESS_KEY', ''),
        client_kwargs={},
        config_kwargs={
            's3': {
                'addressing_style': 'path',
            },
            'signature_version': current_app.config.get(
                'S3_SIGNATURE_VERSION', 's3v4'
            ),
        },
        s3_additional_kwargs={
            'ACL': 'private',
        },
    )

    s3_endpoint = current_app.config.get('S3_ENDPOINT_URL', None)
    if s3_endpoint:
        info['client_kwargs']['endpoint_url'] = s3_endpoint

    region_name = current_app.config.get('S3_REGION_NAME', None)
    if region_name:
        info['client_kwargs']['region_name'] = region_name

    return info

InvenioS3.init_s3fs_info = init_s3fs_info

# Override default block size value used for multipart uploads to S3 (object store)
S3_DEFAULT_BLOCK_SIZE = 100 * 2**20 # ~100 MB


# Invenio-Communities
#====================

# Override REVIEW_POLICY_FIELDS to allow readers for direct publication
from invenio_communities.views import communities

communities.REVIEW_POLICY_FIELDS = [
    {
        "text": "Review all submissions",
        "value": "closed",
        "icon": "lock",
        "helpText": _("All submissions to the community must be reviewed."),
    },
    {
        "text": "Allow readers, curators, managers, and owners to publish without review",
        "value": "open",
        "icon": "group",
        "helpText": _(
            "Submissions to the community by default requires review, but readers, curators, managers, and owners can publish directly without review."
        ),
    },
]

# Community permissions
from invenio_communities.permissions import CommunityPermissionPolicy
from invenio_records_permissions.generators import (
    AuthenticatedUser,
    Disable,
    SystemProcess,
)
from invenio_communities.generators import (
    CommunityMembers,
    IfPolicyClosed,
    IfRestricted,
    IfCommunityDeleted,
)

# Important for community selection prior to record sharing
#CommunityPermissionPolicy.can_search = [AuthenticatedUser(), SystemProcess()] - issue when requesting front page
CommunityPermissionPolicy.can_read = [CommunityMembers(), SystemProcess()]

# Important for record sharing
# All communities should have an open record policy (possibility for publishing directly without review) and a restricted visibility
CommunityPermissionPolicy.can_submit_record = [
        IfPolicyClosed(
            "record_policy",
            then_=[Disable()],
            else_=[
                IfRestricted(
                    "visibility",
                    then_=[CommunityMembers()],
                    else_=[Disable()],
                ),
            ],
        ),
]

# Community members are allowed to publish directly without review
CommunityPermissionPolicy.can_include_directly = [
    IfPolicyClosed(
        "review_policy",
        then_=[Disable()],
        else_=[CommunityMembers()],
    ),
]

# Used for search filtering of deleted records
can_read_deleted = [
    IfCommunityDeleted(then_=[SystemProcess()], else_=[SystemProcess()])
]
CommunityPermissionPolicy.can_search_user_communities = [SystemProcess()]
CommunityPermissionPolicy.can_search_invites = [SystemProcess()]
CommunityPermissionPolicy.can_search_requests = [SystemProcess()]
CommunityPermissionPolicy.can_rename = [SystemProcess()]
CommunityPermissionPolicy.can_create = [SystemProcess()]
CommunityPermissionPolicy.can_update = [SystemProcess()]
CommunityPermissionPolicy.can_delete = [SystemProcess()]
CommunityPermissionPolicy.can_purge = [SystemProcess()]
CommunityPermissionPolicy.can_members_add = [SystemProcess()]
CommunityPermissionPolicy.can_members_invite = [SystemProcess()]
CommunityPermissionPolicy.can_members_manage = [SystemProcess()]
CommunityPermissionPolicy.can_members_search = [SystemProcess()]
CommunityPermissionPolicy.can_featured_search = [SystemProcess()]
CommunityPermissionPolicy.can_featured_list = [SystemProcess()]
CommunityPermissionPolicy.can_featured_create = [SystemProcess()]
CommunityPermissionPolicy.can_featured_update = [SystemProcess()]
CommunityPermissionPolicy.can_featured_delete = [SystemProcess()]
CommunityPermissionPolicy.can_moderate = [Disable()]
CommunityPermissionPolicy.can_members_search_public = [SystemProcess()]
CommunityPermissionPolicy.can_members_bulk_update = [SystemProcess()]
CommunityPermissionPolicy.can_members_bulk_delete = [SystemProcess()]
CommunityPermissionPolicy.can_members_update = [SystemProcess()]
CommunityPermissionPolicy.can_members_delete = [SystemProcess()]
CommunityPermissionPolicy.can_invite_owners = [SystemProcess()]
CommunityPermissionPolicy.can_manage_access = [SystemProcess()]
CommunityPermissionPolicy.can_create_restricted = [SystemProcess()]

from invenio_communities import views
from invenio_communities.views.ui import record_permission_denied_error

def deny_access():
    raise PermissionDeniedError()

def create_ui_blueprint(app):
    """Register blueprint routes on app."""
    routes = app.config.get("COMMUNITIES_ROUTES")

    blueprint = Blueprint(
        "invenio_communities",
        __name__,
        template_folder="../templates",
        static_folder="../static",
    )

    # Communities URL rules
    blueprint.add_url_rule(
        routes["frontpage"],
        view_func=deny_access,
    )

    blueprint.add_url_rule(
        routes["search"],
        view_func=deny_access,
    )

    blueprint.add_url_rule(
        routes["new"],
        view_func=deny_access,
    )

    blueprint.add_url_rule(
        routes["about"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(
        routes["curation_policy"],
        view_func=deny_access_for_community,
    )

    # Settings tab routes
    blueprint.add_url_rule(
        routes["settings"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(
        routes["requests"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(
        routes["settings_privileges"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(
        routes["settings_curation_policy"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(
        routes["settings_pages"],
        view_func=deny_access_for_community,
    )

    blueprint.add_url_rule(routes["members"], view_func=deny_access_for_community)

    blueprint.add_url_rule(routes["invitations"], view_func=deny_access_for_community)

    # Register error handlers
    blueprint.register_error_handler(
        PermissionDeniedError, record_permission_denied_error
    )

    return blueprint

views.create_ui_blueprint = create_ui_blueprint


# Invenio-Drafts-Resources
# ========================

# When trying to publish a draft, raise an exception if no community has been selected for the draft
from invenio_drafts_resources.services.records.service import RecordService
from invenio_records_resources.services.uow import (RecordCommitOp, RecordDeleteOp)

@unit_of_work()
def publish(self, identity, id_, uow=None, expand=False):
    """Publish a draft.

    Idea:
        - Get the draft from the data layer (draft is not passed in)
        - Validate it more strictly than when it was originally saved
          (drafts can be incomplete but only complete drafts can be turned
          into records)
        - Create or update associated (published) record with data
    """
    # Get the draft
    draft = self.draft_cls.pid.resolve(id_, registered_only=False)
    self.require_permission(identity, "publish", record=draft)

    # Validate the draft strictly - since a draft can be saved with errors
    # we do a strict validation here to make sure only valid drafts can be
    # published.
    self._validate_draft(identity, draft)

    # Raise an exception if no community has been selected for the draft
    if not bool(draft.parent.communities.ids):
        raise Exception('Please select a community.')

    # Create the record from the draft
    latest_id = draft.versions.latest_id
    record = self.record_cls.publish(draft)

    # Run components
    self.run_components("publish", identity, draft=draft, record=record, uow=uow)

    # Commit and index
    uow.register(RecordCommitOp(record, indexer=self.indexer))
    uow.register(RecordDeleteOp(draft, force=False, indexer=self.indexer))

    if latest_id:
        self._reindex_latest(latest_id, uow=uow)

    return self.result_item(
        self,
        identity,
        record,
        links_tpl=self.links_item_tpl,
        expandable_fields=self.expandable_fields,
        expand=expand,
    )

RecordService.publish = publish

# Invenio-Notifications
# =====================

# Do not associate route ("/accounts/settings/notifications/", methods=["GET", "POST"]) with blueprint below
from flask import Blueprint

def create_blueprint_settings(app):
    """Register blueprint routes on app."""
    blueprint = Blueprint(
        "invenio_notifications_settings",
        __name__,
        template_folder="templates/settings",
        url_prefix="/account/settings/notifications",
        static_folder="static",
    )

    return blueprint

from invenio_notifications import views

views.create_blueprint_settings = create_blueprint_settings

# Flask-Security
# ==============

# prevent users from creating accounts by redirecting to login page
from flask_security import views
from flask import redirect
from flask_security.utils import url_for_security

def register():
    return redirect(url_for_security('login'))

views.register = register
