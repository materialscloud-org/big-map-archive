import os
from datetime import datetime

from dotenv import load_dotenv
from invenio_communities.generators import (CommunityMembers,
                                            IfCommunityDeleted, IfPolicyClosed,
                                            IfRestricted)
from invenio_communities.permissions import CommunityPermissionPolicy
from invenio_communities.views import communities
from invenio_rdm_records.records.systemfields.access.embargo import Embargo
from invenio_rdm_records.records.systemfields.access.field.record import (
    RecordAccess, RecordAccessField)
from invenio_rdm_records.requests.community_submission import \
    CommunitySubmission
from invenio_rdm_records.services.generators import (RecordCommunitiesAction,
                                                     RecordOwners,
                                                     ResourceAccessToken,
                                                     SecretLinks)

from invenio_rdm_records.services.permissions import RDMRecordPermissionPolicy

from invenio_records_permissions.generators import (AnyUser, AuthenticatedUser,
                                                    Disable, IfConfig,
                                                    SystemProcess)

from big_map_archive.api import (BMAEmbargo, BMARecordAccess,
                                 BMARecordAccessField)

def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Create environment variables from .env
# Make sure that invenio.env appears in the virtual environment, in the same directory as invenio.cfg
basedir = os.path.abspath(os.path.dirname(__file__))
# load_dotenv(os.path.join(basedir, 'invenio.env'))
load_dotenv(os.path.join(basedir, '.env'))

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

SQLALCHEMY_DATABASE_URI=os.getenv('INVENIO_SQLALCHEMY_DATABASE_URI')
SQL_DB = os.getenv('INVENIO_SQL_DB')
SQL_PASSWORD = os.getenv('INVENIO_SQL_PASSWORD')
SQL_USER = os.getenv('INVENIO_SQL_USER')

# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = []


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = 'Welcome to BIG-MAP Archive'

# Header logos
THEME_LOGO_LEFT = 'images/battery2030.png'
THEME_LOGO_RIGHT = 'images/big-map.png'
THEME_LOGO = 'images/battery2030.png'

# Site name
THEME_SITENAME = 'BIG-MAP Archive'


# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY='invenio_s3.s3fs_storage_factory'

FILES_REST_DEFAULT_QUOTA_SIZE = 1.00001 * 10**11 # ~100 GB
FILES_REST_DEFAULT_MAX_FILE_SIZE = FILES_REST_DEFAULT_QUOTA_SIZE

# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html
# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'

APP_RDM_DEPOSIT_FORM_QUOTA = {
    "maxFiles": 100,
    "maxStorage": FILES_REST_DEFAULT_QUOTA_SIZE,
}

# Customize shared record page
APP_RDM_DETAIL_SIDE_BAR_TEMPLATES = [
    "invenio_app_rdm/records/details/side_bar/manage_menu.html",
    "invenio_app_rdm/records/details/side_bar/versions.html",
    "invenio_app_rdm/records/details/side_bar/export.html",
]


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

SITE_UI_URL = os.getenv('INVENIO_SITE_UI_URL')
SITE_API_URL = os.getenv('INVENIO_SITE_API_URL')

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "bm-1.0",
            "title": "BIG-MAP Archive License",
            "description": ("The BIG-MAP Archive License allows "
                            "re-distribution and re-use of work "
                            "within the BIG-MAP community."),
            "link": "https://www.big-map.eu/",
        }
    ],
    "publisher": "BIG-MAP Archive"
}


# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Disable metadata-only records
RDM_ALLOW_METADATA_ONLY_RECORDS = False

# Options for reference schemes in the upload form
import idutils

RDM_RECORDS_IDENTIFIERS_SCHEMES = {
    "arxiv": {"label": _("arXiv"), "validator": idutils.is_arxiv, "datacite": "arXiv"},
    "doi": {"label": _("DOI"), "validator": idutils.is_doi, "datacite": "DOI"},
    "isbn": {"label": _("ISBN"), "validator": idutils.is_isbn, "datacite": "ISBN"},
    "url": {"label": _("URL"), "validator": idutils.is_url, "datacite": "URL"},
}

RDM_SEARCH_DRAFTS = {
    'facets': [],
    'sort': ['bestmatch', 'updated-desc', 'updated-asc', 'newest', 'oldest',
             'version'],
}

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ================
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = False  # local login: deny users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# ===================
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# ====================
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "big-map-archive.com"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# ==============

SEARCH_INDEX_PREFIX = "big-map-archive-"

# Flask-Mail
# ==========
# Mail configuration
# =======================
MAIL_ADDRESS = os.getenv('INVENIO_MAIL_ADDRESS')
MAIL_PASSWORD = os.getenv('INVENIO_MAIL_PASSWORD')
MAIL_SERVER = os.getenv('INVENIO_MAIL_SERVER')
MAIL_PORT = os.getenv('INVENIO_MAIL_PORT')
MAIL_USE_TLS = os.getenv('INVENIO_MAIL_USE_TLS')
MAIL_USE_SSL = os.getenv('INVENIO_MAIL_USE_SSL')
MAIL_MAX_EMAILS = os.getenv('INVENIO_MAIL_MAX_EMAILS')
MAIL_ASCII_ATTACHMENTS = os.getenv('INVENIO_MAIL_ASCII_ATTACHMENTS')

MAIL_USERNAME = os.getenv('INVENIO_MAIL_ADDRESS')
MAIL_DEFAULT_SENDER = os.getenv('INVENIO_MAIL_ADDRESS')
SUPPORT_EMAIL = os.getenv('INVENIO_MAIL_ADDRESS')
SECURITY_EMAIL_SENDER = os.getenv('INVENIO_MAIL_ADDRESS')
OAISERVER_ADMIN_EMAILS = [os.getenv('INVENIO_MAIL_ADDRESS')]
APP_RDM_ADMIN_EMAIL_RECIPIENT = os.getenv('INVENIO_MAIL_ADDRESS')
NOREPLY_EMAIL = os.getenv('INVENIO_MAIL_ADDRESS') # this is not working

# Disable email sending by default.
# if set False will send email
# if set True will NOT send email
MAIL_SUPPRESS_SEND = False

# Email subject for account registration emails.
SECURITY_EMAIL_SUBJECT_REGISTER = "Welcome to the BIG MAP Archive"

# Invenio-S3
# ==========
S3_ENDPOINT_URL = os.getenv('INVENIO_S3_ENDPOINT_URL')
S3_ACCESS_KEY_ID = os.getenv('INVENIO_S3_ACCESS_KEY_ID')
S3_SECRET_ACCESS_KEY = os.getenv('INVENIO_S3_SECRET_ACCESS_KEY')
S3_SIGNATURE_VERSION = os.getenv('INVENIO_S3_SIGNATURE_VERSION')
S3_CONTAINER = os.getenv('INVENIO_S3_CONTAINER')
#SWIFT_PROJECT_ID = os.getenv('INVENIO_SWIFT_PROJECT_ID')
#SWIFT_TEMP_URL_KEY = os.getenv('INVENIO_SWIFT_TEMP_URL_KEY')

# Allow S3 endpoint in the CSP rules
APP_DEFAULT_SECURE_HEADERS['content_security_policy']['default-src'].append(S3_ENDPOINT_URL)

# Override default block size value used for multipart uploads to S3 (object store)
S3_DEFAULT_BLOCK_SIZE = 100 * 2**20 # ~100 MB


# Functions overrides
# ===================

# Set access of new records to restricted
from invenio_app_rdm.records_ui.views import deposits
from big_map_archive.ext import new_record
deposits.new_record = new_record

# Override Embargo, RecordAccess and RecordAccessField
Embargo.__init__ = BMAEmbargo.__init__
RecordAccess.__init__ = BMARecordAccess.__init__
RecordAccessField.__init__ = BMARecordAccessField.__init__

# Do not send an email to the community owner(s) when a record is directly published to that community
from invenio_rdm_records.services.review.service import ReviewService
from big_map_archive.ext import submit
ReviewService.submit = submit

# Validate related_identifiers (references)
from big_map_archive.ext import BMARelatedIdentifierSchema
from invenio_rdm_records.services.schemas.metadata import RelatedIdentifierSchema
RelatedIdentifierSchema.validate_related_identifier = BMARelatedIdentifierSchema.validate_related_identifier

# Make upload form's description required
from invenio_rdm_records.services.schemas.metadata import MetadataSchema
MetadataSchema._declared_fields['description'].required = True

# Add publication date
from invenio_rdm_records.services.schemas import RDMRecordSchema
from big_map_archive.ext import BMARecordSchema
RDMRecordSchema.default_nested = BMARecordSchema.default_nested

# Allow multipart file upload
from invenio_s3.ext import InvenioS3
from big_map_archive.ext import init_s3fs_info
InvenioS3.init_s3fs_info = init_s3fs_info

from invenio_records_resources.resources.files.resource import FileResource
from big_map_archive.ext import BMA_RDMFileResource
FileResource.read_content = BMA_RDMFileResource.read_content

# When trying to publish a draft, raise an exception if no community has been selected for the draft
from invenio_drafts_resources.services.records.service import RecordService
from big_map_archive.ext import publish
RecordService.publish = publish


# Views overrides
# ===============

from big_map_archive.views import (invenio_communities_create_ui_blueprint,
                                   invenio_app_rdm_communities_ui_create_ui_blueprint,
                                   invenio_app_rdm_requests_ui_create_ui_blueprint,
                                   invenio_notifications_create_blueprint_settings)

# Community views overrides
from invenio_app_rdm.communities_ui import views as invenio_app_rdm_communities_ui_views
invenio_app_rdm_communities_ui_views.create_ui_blueprint = invenio_app_rdm_communities_ui_create_ui_blueprint

from invenio_communities import views as invenio_communities_views
invenio_communities_views.create_ui_blueprint = invenio_communities_create_ui_blueprint

# Requests views overrides
from invenio_app_rdm.requests_ui import views as invenio_app_rdm_requests_ui_views
invenio_app_rdm_requests_ui_views.create_ui_blueprint = invenio_app_rdm_requests_ui_create_ui_blueprint

# Invenio-Notifications views overrides
from invenio_notifications import views as invenio_notifications_views
invenio_notifications_views.create_blueprint_settings = invenio_notifications_create_blueprint_settings


# Record permissions
# ==================
RDMRecordPermissionPolicy.can_search = [AuthenticatedUser(), SystemProcess()]

# Manage of ShareLinks can only be done by owners of the record
RDMRecordPermissionPolicy.can_manage_record_access = [
    IfConfig(
        "RDM_ALLOW_RESTRICTED_RECORDS",
        then_=[RecordOwners(), SystemProcess()],
        else_=[],
    )
]

# Allow to read drafts and files using SecretLinks
RDMRecordPermissionPolicy.can_read_draft = RDMRecordPermissionPolicy.can_preview + [SecretLinks("view")]

RDMRecordPermissionPolicy.can_draft_read_files = RDMRecordPermissionPolicy.can_preview + [
    ResourceAccessToken("read"),
    SecretLinks("view")
]

# Do not allow to publish using SecretLinks
RDMRecordPermissionPolicy.can_publish = [
    RecordOwners(),
    RecordCommunitiesAction("curate"),
    SystemProcess(),
]

# Disable lift of embargo (embargo is not allowed)
RDMRecordPermissionPolicy.can_lift_embargo = [SystemProcess()]


# Community permissions
# =================
# Override text of REVIEW_POLICY_FIELDS to allow readers for direct publication
communities.REVIEW_POLICY_FIELDS = [
    {
        "text": "Review all submissions",
        "value": "closed",
        "icon": "lock",
        "helpText": _("All submissions to the community must be reviewed."),
    },
    {
        "text": "Allow readers, curators, managers, and owners to publish without review",
        "value": "open",
        "icon": "group",
        "helpText": _(
            "Submissions to the community by default requires review, but readers, curators, managers, and owners can publish directly without review."
        ),
    },
]

# Allow readers to publish without review
CommunitySubmission.needs_context = {
        "community_roles": ["owner", "manager", "curator", "reader"],
}

# Important for community selection prior to record sharing
# Allow AnyUser to read communities info - needed to make records accessible via SecretLink by anyone
CommunityPermissionPolicy.can_read = [AnyUser(), SystemProcess()]
# CommunityPermissionPolicy.can_read = [CommunityMembers(), SystemProcess()]

# Important for record sharing
# All communities should have an open record policy (possibility for publishing directly without review) and a restricted visibility
# record_policy is open => CommunityMembers
CommunityPermissionPolicy.can_submit_record = [
        IfPolicyClosed(
            "record_policy",
            then_=[Disable()],
            else_=[
                IfRestricted(
                    "visibility",
                    then_=[CommunityMembers()],
                    else_=[Disable()],
                ),
            ],
        ),
]

# Community members are allowed to publish directly without review
# review_policy is open => CommunityMembers
CommunityPermissionPolicy.can_include_directly = [
    IfPolicyClosed(
        "review_policy",
        then_=[Disable()],
        else_=[CommunityMembers()],
    ),
]

# Used for search filtering of deleted records
# CommunityPermissionPolicy.can_read_deleted = [
#     IfCommunityDeleted(then_=[SystemProcess()], else_=[SystemProcess()])
# ]
CommunityPermissionPolicy.can_search = [AuthenticatedUser(), SystemProcess()]
CommunityPermissionPolicy.can_search_invites = [SystemProcess()]
CommunityPermissionPolicy.can_search_requests = [SystemProcess()]
CommunityPermissionPolicy.can_rename = [SystemProcess()]
CommunityPermissionPolicy.can_create = [SystemProcess()]
CommunityPermissionPolicy.can_update = [SystemProcess()]
CommunityPermissionPolicy.can_delete = [SystemProcess()]
CommunityPermissionPolicy.can_purge = [SystemProcess()]
CommunityPermissionPolicy.can_featured_search = [SystemProcess()]
CommunityPermissionPolicy.can_featured_list = [SystemProcess()]
CommunityPermissionPolicy.can_featured_create = [SystemProcess()]
CommunityPermissionPolicy.can_featured_update = [SystemProcess()]
CommunityPermissionPolicy.can_featured_delete = [SystemProcess()]
CommunityPermissionPolicy.can_members_add = [SystemProcess()]
CommunityPermissionPolicy.can_members_invite = [SystemProcess()]
CommunityPermissionPolicy.can_members_manage = [SystemProcess()]
CommunityPermissionPolicy.can_members_search = [SystemProcess()]
CommunityPermissionPolicy.can_members_search_public = [SystemProcess()]
CommunityPermissionPolicy.can_members_bulk_update = [SystemProcess()]
CommunityPermissionPolicy.can_members_bulk_delete = [SystemProcess()]
CommunityPermissionPolicy.can_members_update = [SystemProcess()]
CommunityPermissionPolicy.can_members_delete = [SystemProcess()]
CommunityPermissionPolicy.can_invite_owners = [SystemProcess()]
CommunityPermissionPolicy.can_moderate = [Disable()]
CommunityPermissionPolicy.can_manage_access = [SystemProcess()]
CommunityPermissionPolicy.can_create_restricted = [SystemProcess()]

# Statistics (only for testing, override celery beat)
# set the celery beat to store the hits in the
# events-stats, stats and rdmrecords-records indices
# ==========================
# from datetime import timedelta
# from invenio_app_rdm.config import CELERY_BEAT_SCHEDULE

# CELERY_BEAT_SCHEDULE['stats-process-events'] = {
#     'task': 'invenio_stats.tasks.process_events',
#     'schedule': timedelta(seconds=2),
#     'args': [('record-view', 'file-download')]
# }

# CELERY_BEAT_SCHEDULE['stats-aggregate-events'] = {
#     'task': 'invenio_stats.tasks.aggregate_events',
#     'schedule': timedelta(seconds=3),
#     'args': [('record-view-agg', 'file-download-agg')]
# }

# CELERY_BEAT_SCHEDULE['reindex-stats'] = {
#     "task": "invenio_rdm_records.services.tasks.reindex_stats",
#     "schedule": timedelta(seconds=4),
#     "args": [
#         (
#             "stats-record-view",
#             "stats-file-download",
#         )
#     ],
# }
